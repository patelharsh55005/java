q1 minimum,maximum,displat,sort

import java.util.Arrays;

public class SortAndDisplay {

    public static void main(String[] args) {
        // Ensure that exactly 5 command line arguments are provided
        if (args.length != 5) {
            System.out.println("Please provide exactly 5 integer numbers.");
            return;
        }
        
        // Array to store the integer values
        int[] numbers = new int[5];

        // Read integers from command line arguments
        try {
            for (int i = 0; i < args.length; i++) {
                numbers[i] = Integer.parseInt(args[i]);
            }
        } catch (NumberFormatException e) {
            System.out.println("Invalid input. Please provide only integer numbers.");
            return;
        }

        // Sort the array
        Arrays.sort(numbers);

        // Display the sorted array
        System.out.println("Sorted numbers: " + Arrays.toString(numbers));

        // Display the minimum and maximum values
        System.out.println("Minimum value: " + numbers[0]);
        System.out.println("Maximum value: " + numbers[numbers.length - 1]);
    }
}

q.2  five normal

import java.util.Arrays;

public class SortStrings {

    public static void main(String[] args) {
        // Ensure that exactly 5 command line arguments are provided
        if (args.length != 5) {
            System.out.println("Please provide exactly 5 strings.");
            return;
        }
        
        // Copy command line arguments into a string array
        String[] strings = args.clone();

        // Sort the array of strings
        Arrays.sort(strings);

        // Display the sorted array
        System.out.println("Sorted strings: " + Arrays.toString(strings));
    }
}

q.3   utility

import java.util.Scanner;

public class utility {

    public static long factorial(long value) {
        if (value < 0) {
            System.out.println("Factorial is not negative numbers.");
            return -1;
        }
        long res = 1;
        for (long i = 2; i <= value; i++) {
            res = res * i;
        }
        System.out.println("Factorial of "+value+" is: "+res);
        return res;
    }
    
    public static boolean isPrime(int value) {
        if (value <= 1) {
           
            System.out.println(value+" is not prime number");
            return false;

        }
        for (int i = 2; i <= Math.sqrt(value); i++) {
            if (value % i == 0) {
                System.out.println(value+" is not prime number");

                return false;
            }
        }
        System.out.println(value+" is prime number");

        return true;
    }

   
    public static boolean isEven(long value) {
        if(value%2==0)
        {
            System.out.println(value+" is Even number");
            return true;
        }
        else
        {
            System.out.println(value+" is not Even number");
            return false;
        }
    }

   
    public static boolean isOdd(long value) {
        if(value%2==1)
        {
            System.out.println(value+" is ODD number");
            return true;
        }
        else
        {
            System.out.println(value+" is not ODD number");
            return false;
        }
    }

    public static void main(String[] args) {
        
        Scanner s = new Scanner(System.in);

        System.out.print("Enter a number to find factorial: ");
        long f= s.nextLong();
        factorial(f);
       
        System.out.println("");
        System.out.print("Enter a number to check prime number: ");
        int p = s.nextInt();
        isPrime(p);

        System.out.println("");
        System.out.print("Enter a number to check even number: ");
        long e= s.nextLong();
        isEven(e);

        System.out.println("");
        System.out.print("Enter a number to check odd number: ");
        long o = s.nextLong();
        isOdd(o);

        s.close();
    }
}

q.4   zero,positive,negative,odd,even

import java.util.Scanner;

public class Number {
    private double value;
    public Number(double value) {
        this.value = value;
    }
    public boolean isZero() {
        return value == 0;
    }
    public boolean isPositive() {
        return value > 0;
    }
    public boolean isNegative() {
        return value < 0;
    }
    public boolean isEven() {
        return value % 2 == 0;
    }
    public boolean isOdd() {
        return value % 2 != 0;
    }
    public double getFactorial() {
        if (value < 0 || value != (int) value) {
            System.out.println("Factorial is only defined for non-negative integers.");
        }
        double result = 1;
        for (int i = 2; i <= value; i++) {
            result *= i;
        }
        return result;
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);

        System.out.print("Enter a number: ");
        double inputValue = scanner.nextDouble();

        Number number = new Number(inputValue);
        number.isZero();
        System.out.println("");
        System.out.println("The number zero: " + number.isZero());
        System.out.println("The number positive: " + number.isPositive());
        System.out.println("The number negative: " + number.isNegative());
        System.out.println("The number even: " + number.isEven());
        System.out.println("The number odd: " + number.isOdd());
        try {
            System.out.println("Factorial of the number: " + number.getFactorial());
        } catch (IllegalArgumentException e) {
            System.out.println(e.getMessage());
        }

        scanner.close();
    }
}

q.5   addition,subtraction,multiplication

public class MatrixOperations {

    public static void main(String[] args) {
        // Example matrices
        int[][] matrixA = {
            {1, 2, 3},
            {4, 5, 6},
            {7, 8, 9}
        };

        int[][] matrixB = {
            {9, 8, 7},
            {6, 5, 4},
            {3, 2, 1}
        };

        // Perform matrix operations
        int[][] resultAdd = addMatrices(matrixA, matrixB);
        int[][] resultSubtract = subtractMatrices(matrixA, matrixB);
        int[][] resultMultiply = multiplyMatrices(matrixA, matrixB);

        // Print results
        System.out.println("Matrix A:");
        printMatrix(matrixA);
        System.out.println("Matrix B:");
        printMatrix(matrixB);
        System.out.println("Matrix A + Matrix B:");
        printMatrix(resultAdd);
        System.out.println("Matrix A - Matrix B:");
        printMatrix(resultSubtract);
        System.out.println("Matrix A * Matrix B:");
        printMatrix(resultMultiply);
    }

    // Method to add two matrices
    public static int[][] addMatrices(int[][] a, int[][] b) {
        int rows = a.length;
        int cols = a[0].length;
        int[][] result = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = a[i][j] + b[i][j];
            }
        }
        return result;
    }

    // Method to subtract two matrices
    public static int[][] subtractMatrices(int[][] a, int[][] b) {
        int rows = a.length;
        int cols = a[0].length;
        int[][] result = new int[rows][cols];

        for (int i = 0; i < rows; i++) {
            for (int j = 0; j < cols; j++) {
                result[i][j] = a[i][j] - b[i][j];
            }
        }
        return result;
    }

    // Method to multiply two matrices
    public static int[][] multiplyMatrices(int[][] a, int[][] b) {
        int rowsA = a.length;
        int colsA = a[0].length;
        int rowsB = b.length;
        int colsB = b[0].length;

        // Ensure matrices can be multiplied
        if (colsA != rowsB) {
            throw new IllegalArgumentException("Number of columns in Matrix A must be equal to number of rows in Matrix B.");
        }

        int[][] result = new int[rowsA][colsB];

        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                result[i][j] = 0;
                for (int k = 0; k < colsA; k++) {
                    result[i][j] += a[i][k] * b[k][j];
                }
            }
        }
        return result;
    }

    // Method to print a matrix
    public static void printMatrix(int[][] matrix) {
        for (int[] row : matrix) {
            for (int element : row) {
                System.out.print(element + " ");
            }
            System.out.println();
        }
    }
}

q.6  circle

public class circle {
    private double x, y;  
    private double r;     

    public circle() {
        this.x = 0;
        this.y = 0;
        this.r = 1;
    }

    public circle(double r) {
        this.x = 0;
        this.y = 0;
        this.r = r;
    }

    public circle(double x, double y, double r) {
        this.x = x;
        this.y = y;
        this.r = r;
    }

    public double area() {
        return Math.PI * r * r;
    }

    public double circumference() {
        return 2 * Math.PI * r;  
    }

    public double diameter() {
        return 2 * r;  
    }

    public double getX() {
        return x;
    }

    public double getY() {
        return y;
    }

    public double getRadius() {
        return r;
    }

    public void setX(double x) {
        this.x = x;
    }

    public void setY(double y) {
        this.y = y;
    }

    public void setRadius(double r) {
        this.r = r;
    }

    public static void main(String[] args) {
        circle circle1 = new circle();
        System.out.println("Circle 1:");
        System.out.println("Area: " + circle1.area());
        System.out.println("Circumference: " + circle1.circumference());
        System.out.println("Diameter: " + circle1.diameter());

        
    }
}

q.7   class stack   push,pop,traverse

import java.util.Scanner;

class Stack {
  int top = -1, s[], max;
  Scanner s1 = new Scanner(System.in);;

  Stack() {
    max = 5;
    s = new int[max];
  }

  Stack(int len) {
    max = len;
    s = new int[max];
  }

  void push() {
    int ele;
    if (top == max - 1)
      System.out.println("\nStack is Overflow..");
    else {
      top++;
      System.out.print("Enter New Element : ");
      ele = s1.nextInt();
      s[top] = ele;
    }
  }

  void pop() {
    if (top == -1)
      System.out.println("\nStack is Underflow..");
    else {
      System.out.println("\nRemove Element : " + s[top]);
      top--;
    }
  }

  void traverse() {
    if (top == -1)
      System.out.println("\nStack is Underflow..!!");
    else {
      System.out.print("Elements : ");
      for (int i = top; i >= 0; i--)
        System.out.print(s[i] + " ");
    }
  }
}

class std {
  static Scanner sc=new Scanner(System.in);
  public static void operation(Stack s)
  {
      while (true)
      {
         System.out.println("\n1.PUSH");
         System.out.println("2.POP");
         System.out.println("3.Traverse");
         System.out.println("4.Exit");
         System.out.print("Enter Your Choice : ");
         int c=sc.nextInt();
         switch (c) {
          case 1:
            s.push();
            break;
          case 2:
            s.pop();
            break;
          case 3:
            s.traverse();
            break;
          case 4:
            System.exit(0);
          default:System.out.println("\nPlease,enter valid one above choice");
            break;
         }
      }
  }
  public static void main(String args[])
  {

    boolean t=true;
    while(t)
    {
	  	  Stack s1=new Stack();
          operation(s1);
          t=false;
    
  }
  }
}







q8    matrix , row columns




import java.util.Scanner;

class Matrix
{
    private int row,col;
    private double m1[][];
    private static double v=1;
    Matrix()
    {
        row=2;
        col=2;
        m1=new double[row][col];
        intilize(row, col, m1);
    }
    Matrix(int row,int col)
    {
        this.row=row;
        this.col=col;
        m1=new double[row][col];
        intilize(row, col, m1);
    } 
    public double getValue(int r,int c)
    {
        return m1[r][c];
    }
    public Matrix add(Matrix m2)
    {

        System.out.println("\nAddition Above two matrix");
        Matrix sum=new Matrix(row,col);
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                sum.m1[i][j]=m1[i][j]+m2.getValue(i, j);
            }
        }
        return sum;
    }
    public Matrix sub(Matrix m2)
    {
 
        System.out.println("\nSubstraction Above two matrix");
        Matrix sum=new Matrix(row,col);
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                sum.m1[i][j]=m1[i][j]-m2.getValue(i, j);
            }
        }
        return sum;
    }
    public Matrix mul(Matrix m2)
    {
       
        System.out.println("\nMultiplication Above two matrix");
        Matrix sum=new Matrix(row,col);
        if(row==col)
        {
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {

                 double m=0;
				 for(int k=0;k<col;k++)
				 {
					 m=m+(m1[i][k]*m2.getValue(k,j));
				 }
			
                sum.m1[i][j]=m;
            }
        }
        }
        else
        {
             for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                sum.m1[i][j]=m1[i][j]*m2.getValue(i, j);
            }
        }
        }
        return sum;
    }
    public Matrix transpose()
    {
         Matrix sum=new Matrix(row,col);    
        if(row==col)
        {
         
         for(int i=0;i<row;i++)
         {
            for(int j=0;j<col;j++)
            {
                sum.m1[i][j]=m1[j][i];
            }
         }
        }
        else
        {
      sum=new Matrix(col,row);
   
         for(int i=0;i<col;i++)
         {
             for(int j=0;j<row;j++)
             {
                sum.m1[i][j]=m1[j][i];
             }
         }
        }
        return sum;
    }
    public void intilize(int row,int col,double m1[][])
    {
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                  m1[i][j]=v;
                  v+=1;
                  
            }
        }
    }
    public void user_intialize()
    {
        Scanner sc=new Scanner(System.in);
        int v1;
         for(int i=0;i<row;i++)
         {
            for(int j=0;j<col;j++)
            {
                System.out.println("Enter m["+i+"]["+j+"] value : ");
                
                v1=sc.nextInt();
                m1[i][j]=v1;
            }
         }
        //  sc.close();
    }
    public String toString() 
    {
        for(int i=0;i<row;i++)
        {
            for(int j=0;j<col;j++)
            {
                System.out.print(m1[i][j]+"   ");
            }
            System.out.println();
        }
        return " ";
    }
}
public class PR8 {
  static Scanner sc=new Scanner(System.in);
  public static void operation(Matrix m1,Matrix m2)
  {
    System.out.println("\nMatrix 1 : ");
    System.out.println(m1);
    System.out.println("\nMatrix 2 : ");
    System.out.println(m2);
      while (true)
      {
         System.out.println("\n1.Own Intialize Matrix");
         System.out.println("2.Addition");
         System.out.println("3.Substraction");
         System.out.println("4.Multiplication");
         System.out.println("5.Transpose of First Matrix");
         System.out.println("6.Exit");
         System.out.println("Enter Your Choice : ");
         int c=sc.nextInt();
         Matrix ans;
         switch (c) {
          case 1:
                    System.out.println("1.Intialize Matrix 1");
					System.out.println("2.Intialize Matrix 2");
					System.out.println("Enter your choice");
					int c1 = sc.nextInt();
					switch (c1) {
						case 1:m1.user_intialize(); 
                               System.out.println("Matrix - 1");
                               System.out.println(m1);
                               break;
                        case 2:m2.user_intialize();
                              System.out.println("Matrix - 2");
                               System.out.println(m2);
                               break;
                        default:System.out.println("Please,enter valid choice");
                    }
                    break;
          case 2:
            ans=m1.add(m2);
            System.out.println(ans);
            break;
          case 3:
          ans=m1.sub(m2);
          System.out.println(ans);
            break;
          case 4:
          ans=m1.mul(m2);
          System.out.println(ans);
            break;
          case 5:
           ans=m1.transpose();
           System.out.println(ans);
           break;
          case 6:
            System.exit(0);
          default:System.out.println("\nPlease,enter valid one above choice");
            break; 
         }
      }
  }
    public static void main(String[] args) {
       
    boolean t=true;
    while(t)
    {
	   System.out.println("1.Default Matrix");
       System.out.println("2.User Length Matrix");
       System.out.println("Enter Your Choice : ");
       int c=sc.nextInt();
       if(c==1)
       {
          Matrix m1=new Matrix();
          Matrix m2=new Matrix();
          operation(m1,m2);
          t=false;
       }
       else if(c==2)
       {
           System.out.println("Enter Matrix row and column : ");
           int r=sc.nextInt();
           c=sc.nextInt();
           Matrix m2=new Matrix(r,c);
           Matrix m3=new Matrix(r,c);
           operation(m2,m3);
           t=false;
       }
      else
      {
       System.out.println("\nPlease,enter one of above choice");
      }
  }
     
    }
}





q9    abstract rectangle,triangle,circle



// Write a java program to create an abstract class named Shape that contains two
// integers and abstract methods named area() and perimeter(). Provide three classes
// named Rectangle, Triangle and Circle such that each one of the classes extends the
// class
// Shape. Each one of the classes contains all possible constructor(s) and overridden
// methods
// 1) public double area() that calculate and return area of the given shape. And
// 2) public double perimeter() that calculates and returns circumference/perimeter
// of the given shape.
/**
 * PR9
 */
abstract class Shape {

  int x,y;
  
  abstract public double area();
  abstract public double perimeter();
}
class Rectangle extends Shape
{

    public Rectangle()
    {

        x=10;
        y=20;
    }
    public Rectangle(int x,int y)
    {
        this.x=x;
        this.y=y;
    }
    public double area()
    {
        
        return x*y;
    }
    public double perimeter()
    {
        return (x+y)*2;
    }
}
class Triangle extends Shape
{
    int z;
    public Triangle()
    {

        x=10;
        y=20;
        z=15;
    }
    public Triangle(int x,int y,int z)
    {
        this.x=x;
        this.y=y;
        this.z=z;
    }
    public double area()
    {
        
        return (x*y)/2;
    }
    public double perimeter()
    {
        return x+y+z;
    }
}
class Circle extends Shape
{
    public Circle()
    {

        x=10;
    }
    public Circle(int x)
    {
        this.x=x;
    }
    public double area()
    {
        
        return Math.PI*x*x;
    }
    public double perimeter()
    {
        return 2*Math.PI*x;
    }
}
public class PR9 {
public static void main(String[] args) {
    System.out.println("Calculate Ractangle operation using Default constructor");
    Rectangle r1=new Rectangle();
    System.out.println("Area of ractangle      : "+r1.area());
    System.out.println("Perimeter of ractangle : "+r1.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Ractangle operation using Perameterized constructor");
    Rectangle r2=new Rectangle(15,25);
    System.out.println("Area of ractangle      : "+r2.area());
    System.out.println("Perimeter of ractangle : "+r2.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Triangle operation using Default constructor");
    Triangle t1=new Triangle();
    System.out.println("Area of Triangle      : "+t1.area());
    System.out.println("Perimeter of Triangle : "+t1.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Triangle operation using Perameterized constructor");
    Triangle t2=new Triangle(16,12,18);
    System.out.println("Area of Triangle      : "+t2.area());
    System.out.println("Perimeter of Triangle : "+t2.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Circle operation using Default constructor");
    Circle c1=new Circle();
    System.out.println("Area of Circle      : "+c1.area());
    System.out.println("Perimeter of Circle : "+c1.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Circle operation using Perameterized constructor");
    Circle c2=new Circle(5);
    System.out.println("Area of Circle      : "+c2.area());
    System.out.println("Perimeter of Circle : "+c2.perimeter());
}
    
}



q10   interface  rectangle,triangle,circle





// Write a java program to create an abstract class named Shape that contains two
// integers and abstract methods named area() and perimeter(). Provide three classes
// named Rectangle, Triangle and Circle such that each one of the classes extends the
// class
// Shape. Each one of the classes contains all possible constructor(s) and overridden
// methods
// 1) public double area() that calculate and return area of the given shape. And
// 2) public double perimeter() that calculates and returns circumference/perimeter
// of the given shape.
/**
 * PR9
 */
abstract class Shape {

  int x,y;
  
  abstract public double area();
  abstract public double perimeter();
}
class Rectangle extends Shape
{

    public Rectangle()
    {

        x=10;
        y=20;
    }
    public Rectangle(int x,int y)
    {
        this.x=x;
        this.y=y;
    }
    public double area()
    {
        
        return x*y;
    }
    public double perimeter()
    {
        return (x+y)*2;
    }
}
class Triangle extends Shape
{
    int z;
    public Triangle()
    {

        x=10;
        y=20;
        z=15;
    }
    public Triangle(int x,int y,int z)
    {
        this.x=x;
        this.y=y;
        this.z=z;
    }
    public double area()
    {
        
        return (x*y)/2;
    }
    public double perimeter()
    {
        return x+y+z;
    }
}
class Circle extends Shape
{
    public Circle()
    {

        x=10;
    }
    public Circle(int x)
    {
        this.x=x;
    }
    public double area()
    {
        
        return Math.PI*x*x;
    }
    public double perimeter()
    {
        return 2*Math.PI*x;
    }
}
public class PR9 {
public static void main(String[] args) {
    System.out.println("Calculate Ractangle operation using Default constructor");
    Rectangle r1=new Rectangle();
    System.out.println("Area of ractangle      : "+r1.area());
    System.out.println("Perimeter of ractangle : "+r1.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Ractangle operation using Perameterized constructor");
    Rectangle r2=new Rectangle(15,25);
    System.out.println("Area of ractangle      : "+r2.area());
    System.out.println("Perimeter of ractangle : "+r2.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Triangle operation using Default constructor");
    Triangle t1=new Triangle();
    System.out.println("Area of Triangle      : "+t1.area());
    System.out.println("Perimeter of Triangle : "+t1.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Triangle operation using Perameterized constructor");
    Triangle t2=new Triangle(16,12,18);
    System.out.println("Area of Triangle      : "+t2.area());
    System.out.println("Perimeter of Triangle : "+t2.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Circle operation using Default constructor");
    Circle c1=new Circle();
    System.out.println("Area of Circle      : "+c1.area());
    System.out.println("Perimeter of Circle : "+c1.perimeter());
    System.out.println("-------------------------------------------------------------");
    System.out.println("Calculate Circle operation using Perameterized constructor");
    Circle c2=new Circle(5);
    System.out.println("Area of Circle      : "+c2.area());
    System.out.println("Perimeter of Circle : "+c2.perimeter());
}
    
}



q11   argument negitive  



class CustomException extends Exception {
    CustomException(String s) {
        super(s);
    }
}

public class PR11 {
    public static void main(String[] args) {
        System.out.println("Command Line All Arguments : ");
        try {
            for (int i = 0; i < args.length; i++) {
                if (Integer.parseInt(args[i]) < 0)
                    throw new CustomException("Negative Value Not Allowed");
                else
                    System.out.print(args[i] + " ");
            }
        } catch (CustomException e) {
            System.err.println("\nError : " + e.getMessage());
            e.printStackTrace();
        }
    }
}




q12    stack underflow/overflow



import java.util.Scanner;
class StackException extends Exception
{
    StackException(String s)
    {
        super(s);
    }
}
class Stack1 {
  int top = -1, s[], max;
  Scanner s1 = new Scanner(System.in);;

  Stack1() {
    max = 5;
    s = new int[max];
  }

  Stack1(int len) {
    max = len;
    s = new int[max];
  }

  void push()throws StackException {
    int ele;
    if (top == max - 1)
      throw new StackException("\nStack is Overflow..!!");
    else {
      top++;
      System.out.println("Enter New Element : ");
      ele = s1.nextInt();
      s[top] = ele;
    }
  }

  void pop()throws StackException{
    if (top == -1)
      throw new StackException("\nStack is Underflow..!!");
    else {
      System.out.println("\nRemove Element : " + s[top]);
      top--;
    }
  }

  void traverse()throws StackException {
    if (top == -1)
      throw new StackException("\nStack is Underflow..!!");
    else {
      System.out.print("Elements : ");
      for (int i = top; i >= 0; i--)
        System.out.print(s[i] + " ");
    }
  }
}

public class P12 {
  static Scanner sc=new Scanner(System.in);
  public static void operation(Stack1 s)
  {
 
      while (true)
      {
        try
        {
         System.out.println("\n1.PUSH");
         System.out.println("2.POP");
         System.out.println("3.Traverse");
         System.out.println("4.Exit");
         System.out.println("Enter Your Choice : ");
         int c=sc.nextInt();
         switch (c) {
          case 1:
            s.push();
            break;
          case 2:
            s.pop();
            break;
          case 3:
            s.traverse();
            break;
          case 4:
            System.exit(0);
          default:System.out.println("\nPlease,enter valid one above choice");
            break;
         }
      }
      catch(StackException e)
      {
          System.err.print("\nError : "+e.getMessage());
          e.printStackTrace();
      }
    }
   
  }
  public static void main(String args[])
  {

    boolean t=true;
    while(t)
    {
	     System.out.println("1.Default Stack");
       System.out.println("2.User Length Stack");
       System.out.println("Enter Your Choice : ");
       int c=sc.nextInt();
       if(c==1)
       {
          Stack1 s1=new Stack1();
          operation(s1);
          t=false;
       }
       else if(c==2)
       {
           System.out.println("Enter Stack Length : ");
           c=sc.nextInt();
           Stack1 s2=new Stack1(c);
           operation(s2);
           t=false;
       }
      else
      {
       System.out.println("\nPlease,enter one of above choice");
      }
  }
  }
}
